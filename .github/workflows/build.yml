name: Build

on:
    push: ~
    pull_request: ~
    release:
        types: [created]
    schedule:
        -
            cron: "0 1 * * 6" # Run at 1am every Saturday

jobs:
    tests:
        runs-on: ubuntu-latest

        name: "PHP ${{ matrix.php }}, MySQL ${{ matrix.mysql }}, Node ${{ matrix.node }}${{ matrix.symfony-version != '' && format(', Symfony {0}', matrix.symfony-version) || '' }}${{ matrix.twig-version != '' && format(', Twig {0}', matrix.twig-version) || '' }}${{ matrix.composer-flags != '' && format(', Composer with {0}', matrix.composer-flags) || '' }}${{ matrix.sylius-resource-bundle-version != '' && format(', Sylius ResourceBundle {0}', matrix.sylius-resource-bundle-version) || '' }}"

        strategy:
            fail-fast: false
            matrix:
                php: [7.4, 7.3]
                node: [10.x]
                mysql: [5.7, 8.0]

                include:
                    -
                        php: 7.3
                        symfony-version: 4.4.*
                    -
                        php: 7.3
                        symfony-version: 5.1.*
                        sylius-resource-bundle-version: dev-master
                    -
                        php: 7.4
                        symfony-version: 4.4.*
                        twig-version: ^2.12
                    -
                        php: 7.4
                        symfony-version: 4.4.*
                        twig-version: ^3.0
                    -
                        php: 7.4
                        symfony-version: 4.4.*
                        twig-version: ^3.0
                    -
                        php: 7.4
                        symfony-version: 5.1.*
                        twig-version: ^3.0
                        sylius-resource-bundle-version: dev-master
                exclude:
                    -
                        php: 7.3
                        mysql: 8.0

        env:
            APP_ENV: test
            DATABASE_URL: "mysql://root:root@127.0.0.1/sylius?serverVersion=${{ matrix.mysql }}"

        steps:
            -
                uses: actions/checkout@v2

            -
                name: Setup PHP
                uses: shivammathur/setup-php@v2
                with:
                    php-version: "${{ matrix.php }}"
                    extensions: intl
                    tools: symfony
                    coverage: none

            -
                name: Setup Node
                uses: actions/setup-node@v1
                with:
                    node-version: "${{ matrix.node }}"

            -
                name: Shutdown default MySQL
                run: sudo service mysql stop

            -
                name: Setup MySQL
                uses: mirromutth/mysql-action@v1.1
                with:
                    mysql version: "${{ matrix.mysql }}"
                    mysql root password: "root"

            -
                name: Restrict Symfony version
                if: matrix.symfony-version != ''
                run: |
                    composer global require --no-progress --no-scripts --no-plugins "symfony/flex:^1.10"
                    composer config extra.symfony.require "${{ matrix.symfony-version }}"
                    (cd tests/Application && composer config extra.symfony.require "${{ matrix.symfony-version }}")

            -
                name: Restrict sylius/resource-bundle version
                if: matrix.sylius-resource-bundle-version != ''
                run: composer require --dev "sylius/resource-bundle:${{ matrix.sylius-resource-bundle-version }}" --no-update --no-scripts

            -
                name: Restrict twig/twig version
                if: matrix.twig-version != ''
                run: composer require --dev "twig/twig:${{ matrix.twig-version }}" --no-update --no-scripts

            -
                name: Get Composer cache directory
                id: composer-cache
                run: echo "::set-output name=dir::$(composer config cache-files-dir)"

            -
                name: Cache Composer
                uses: actions/cache@v2
                with:
                    path: ${{ steps.composer-cache.outputs.dir }}
                    key: ${{ runner.os }}-php-${{ matrix.php }}-composer-${{ hashFiles('**/composer.json **/composer.lock') }}
                    restore-keys: |
                        ${{ runner.os }}-php-${{ matrix.php }}-composer-

            -
                name: Install PHP dependencies
                run: composer install --no-interaction

            -
                name: Get Yarn cache directory
                id: yarn-cache
                run: echo "::set-output name=dir::$(yarn cache dir)"

            -
                name: Cache Yarn
                uses: actions/cache@v2
                with:
                    path: ${{ steps.yarn-cache.outputs.dir }}
                    key: ${{ runner.os }}-node-${{ matrix.node }}-yarn-${{ hashFiles('**/package.json **/yarn.lock') }}
                    restore-keys: |
                        ${{ runner.os }}-node-${{ matrix.node }}-yarn-

            -
                name: Install JS dependencies
                run: (cd tests/Application && yarn install)

            -
                name: Prepare test application database
                run: |
                    (cd tests/Application && bin/console doctrine:database:create -vvv)
                    (cd tests/Application && bin/console doctrine:migrations:migrate -n -vvv -q)

            -
                name: Prepare test application assets
                run: |
                    (cd tests/Application && bin/console assets:install public -vvv)
                    (cd tests/Application && yarn build)

            -
                name: Prepare test application cache
                run: (cd tests/Application && bin/console cache:warmup -vvv)

            -
                name: Load fixtures in test application
                run: (cd tests/Application && bin/console sylius:fixtures:load -n)

            -
                name: Run analysis
                run: composer analyse

            -
                name: Run PHPSpec
                run: vendor/bin/phpspec run --ansi -f progress --no-interaction

            -
                name: Run PHPUnit
                run: vendor/bin/phpunit --colors=always

            -
                name: Run Behat
                run: vendor/bin/behat --colors --strict -vvv --no-interaction || vendor/bin/behat --colors --strict -vvv --no-interaction --rerun

            -
                name: Upload Behat logs
                uses: actions/upload-artifact@v2
                if: failure()
                with:
                    name: Behat logs
                    path: etc/build/
                    if-no-files-found: ignore
